<channel>
  <id>cfd0753f-9870-4974-877f-029758d4e051</id>
  <name>Visit Sender</name>
  <description>This channel is responsible for sending a visit event to the openhds</description>
  <enabled>true</enabled>
  <version>2.2.1.5861</version>
  <lastModified>
    <time>1341177228000</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>4</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">None</property>
    </properties>
    <transformer>
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>visitLocation - extId (out)</name>
          <script>tmp[&apos;visitLocation&apos;][&apos;extId&apos;] = validate(msg[&apos;location_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;visitLocation&apos;][&apos;extId&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;location_id&apos;].toString().toUpperCase()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <name>visitDate (out)</name>
          <script>tmp[&apos;visitDate&apos;] = validate(msg[&apos;visit_date&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;visitDate&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;visit_date&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>2</sequenceNumber>
          <name>roundNumber (out)</name>
          <script>tmp[&apos;roundNumber&apos;] = validate(msg[&apos;round_number&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;roundNumber&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;round_number&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>3</sequenceNumber>
          <name>collectedBy - extId (out)</name>
          <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8
cmVzdWx0Pg0KICAgIDxfdXJpPnZhbHVlPC9fdXJpPg0KICAgIDx2aXNpdF9kYXRlPnZhbHVlPC92
aXNpdF9kYXRlPg0KICAgIDxkZXJpdmVkX2Zyb21fdXJpPnZhbHVlPC9kZXJpdmVkX2Zyb21fdXJp
Pg0KICAgIDxmaWVsZF93b3JrZXJfaWQ+dmFsdWU8L2ZpZWxkX3dvcmtlcl9pZD4NCiAgICA8cm91
bmRfbnVtYmVyPnZhbHVlPC9yb3VuZF9udW1iZXI+DQogICAgPGxvY2F0aW9uX2lkPnZhbHVlPC9s
b2NhdGlvbl9pZD4NCjwvcmVzdWx0Pg0=</inboundTemplate>
      <outboundTemplate encoding="base64">PHZpc2l0PgogIDx2aXNpdExvY2F0aW9uPgogICAgPGV4dElkPjwvZXh0SWQ+CiAgPC92aXNpdExv
Y2F0aW9uPgogIDx2aXNpdERhdGU+PC92aXNpdERhdGU+CiAgIDxyb3VuZE51bWJlcj48L3JvdW5k
TnVtYmVyPgogIDxjb2xsZWN0ZWRCeT4KICAgIDxleHRJZD48L2V4dElkPgogIDwvY29sbGVjdGVk
Qnk+CjwvdmlzaXQ+</outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">true</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">true</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.2.1.5861</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>Destination 1</name>
      <properties>
        <property name="DataType">HTTP Sender</property>
        <property name="dispatcherAuthenticationType">Basic</property>
        <property name="dispatcherCharset">UTF-8</property>
        <property name="dispatcherContent">${message.transformedData}</property>
        <property name="dispatcherContentType">text/plain</property>
        <property name="dispatcherHeaders">&lt;properties&gt;
  &lt;property name=&quot;Content-type&quot;&gt;application/xml&lt;/property&gt;
&lt;/properties&gt;</property>
        <property name="dispatcherIncludeHeadersInResponse">0</property>
        <property name="dispatcherMethod">post</property>
        <property name="dispatcherMultipart">0</property>
        <property name="dispatcherParameters">&lt;properties/&gt;</property>
        <property name="dispatcherPassword">${openhdsPassword}</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherSocketTimeout">30000</property>
        <property name="dispatcherUseAuthentication">1</property>
        <property name="dispatcherUsername">${openhdsUser}</property>
        <property name="host">${openhdsUrl}/api/rest/corewebservice/visit</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64">PG91dG1pZ3JhdGlvbj4KICA8aW5zdGFuY2VJZCAvPgogIDxjb2xsZWN0ZWRCeT4KICAgIDxleHRJ
ZCAvPgogIDwvY29sbGVjdGVkQnk+CiAgPGluZGl2aWR1YWw+CiAgICA8ZXh0aWQgLz4KICA8L2lu
ZGl2aWR1YWw+CiAgPGhvdXNlPgogICAgPGV4dElkIC8+CiAgPC9ob3VzZT4KICA8b3JpZ2luIC8+
CiAgPGhvdXNlaG9sZD4KICAgIDxleHRJZCAvPgogIDwvaG91c2Vob2xkPgogIDxyZWFzb24gLz4K
ICA8dmlzaXQ+CiAgICA8ZXh0SWQgLz4KICA8L3Zpc2l0PgogIDxkYXRlT2ZJbnRlcnZpZXcgLz4K
ICA8cmVjb3JkZWREYXRlIC8+CiAgPG5hbWVPZk1pZ3JhdCAvPgogIDxnZW5kZXIgLz4KICA8aG91
c2Vob2xkTmFtZSAvPgogIDxwbGFjZU1vdmVkVG8gLz4KICA8aG91c2VOYW1lIC8+CiAgPHNlY3Rp
b24gLz4KICA8dmlsbGFnZSAvPgogIDxwaG9uZU51bWJlciAvPgogIDxwbGFjZU1vdmVkVG9PdGhl
ciAvPgogIDxyZWFzb25Gb3JNaWdyYXRpb25PdGhlciAvPgo8L291dG1pZ3JhdGlvbj4=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">true</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">true</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>var obj = responseMap.get(&quot;Destination 1&quot;);
var status = obj.getStatus().toString();

if (status.indexOf(&quot;FAILURE&quot;) === 0) {
  logger.warn(&quot;There was an HTTP error sending a form&quot;);
  return;
}

var msgXml = new XML(obj.getMessage());
var origXml = new XML(messageObject.getRawData());
var invalidForm = msgXml[&quot;errors&quot;].length() &gt; 0 ? true : false;

executeUpdateQuery(&quot;UPDATE &quot; + globalMap.get(&quot;visitTableName&quot;) + &quot; SET processed_by_mirth = true, validation_failed = &quot; + invalidForm + &quot; WHERE _URI = &apos;&quot; + origXml[&apos;_uri&apos;].toString() + &quot;&apos;&quot;);

var instanceXml = reconstructInstanceXml(globalMap.get(&quot;visitTableName&quot;), origXml, globalMap.get(&quot;visitFormName&quot;));

if (invalidForm) {
  var auditXml = constructAuditXml(instanceXml, msgXml[&quot;errors&quot;], &quot;Visit&quot;, origXml[&apos;field_worker_id&apos;].toString(), origXml[&apos;_uri&apos;].toString(), globalMap.get(&quot;visitFormName&quot;), origXml[&apos;derived_from_uri&apos;].toString(), true);
  router.routeMessage(&quot;Form Submission Channel&quot;, auditXml);
} else {
  var auditXml = constructAuditXml(instanceXml, msgXml[&quot;errors&quot;], &quot;Visit&quot;, origXml[&apos;field_worker_id&apos;].toString(), origXml[&apos;_uri&apos;].toString(), globalMap.get(&quot;visitFormName&quot;), origXml[&apos;derived_from_uri&apos;].toString(), false);
  var completedForm = new XML(&quot;&lt;completedFormSubmission /&gt;&quot;);
  completedForm.appendChild(auditXml);
  completedForm[&quot;completedFormSubmissionId&quot;] = obj.getMessage();
  router.routeMessage(&quot;Form Complete Channel&quot;, completedForm);
}&#xd;return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>