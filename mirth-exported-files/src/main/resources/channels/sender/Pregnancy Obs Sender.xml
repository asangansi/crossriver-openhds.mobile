<channel>
  <id>bfa7dc3a-af2e-40fe-a908-1f5d489ade21</id>
  <name>Pregnancy Obs Sender</name>
  <description></description>
  <enabled>true</enabled>
  <version>2.2.1.5861</version>
  <lastModified>
    <time>1349662301826</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>1</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">None</property>
    </properties>
    <transformer>
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>collectedBy - extId (out)</name>
          <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;field_worker_id&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <name>mother - extid (out)</name>
          <script>tmp[&apos;mother&apos;][&apos;extid&apos;] = validate(msg[&apos;individual_id&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;mother&apos;][&apos;extid&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;individual_id&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>2</sequenceNumber>
          <name>house - extId (out)</name>
          <script>tmp[&apos;house&apos;][&apos;extId&apos;] = validate(msg[&apos;house_id&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;house&apos;][&apos;extId&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;house_id&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>3</sequenceNumber>
          <name>household - extId (out)</name>
          <script>tmp[&apos;household&apos;][&apos;extId&apos;] = validate(msg[&apos;household_id&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;household&apos;][&apos;extId&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;household_id&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>4</sequenceNumber>
          <name>recordedDate (out)</name>
          <script>tmp[&apos;recordedDate&apos;] = validate(msg[&apos;visit_date&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;recordedDate&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;visit_date&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>5</sequenceNumber>
          <name>estimatedDateOfConception (out)</name>
          <script>tmp[&apos;estimatedDateOfConception&apos;] = validate(msg[&apos;lmp&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;estimatedDateOfConception&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;lmp&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>6</sequenceNumber>
          <name>visit - extId (out)</name>
          <script>tmp[&apos;visit&apos;][&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;visit&apos;][&apos;extId&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;visit_id&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>7</sequenceNumber>
          <name>pregWomanName (out)</name>
          <script>tmp[&apos;pregWomanName&apos;] = validate(msg[&apos;first_name&apos;].toString() + msg[&apos;last_name&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;pregWomanName&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;first_name&apos;].toString() + msg[&apos;last_name&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>8</sequenceNumber>
          <name>numMonthsOfPregnancy (out)</name>
          <script>tmp[&apos;numMonthsOfPregnancy&apos;] = validate(msg[&apos;mpreg&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;numMonthsOfPregnancy&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;mpreg&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>9</sequenceNumber>
          <name>attendedAnteNatalClinic (out)</name>
          <script>tmp[&apos;attendedAnteNatalClinic&apos;] = validate(msg[&apos;attend_cli&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;attendedAnteNatalClinic&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;attend_cli&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>10</sequenceNumber>
          <name>receivedTTInjection (out)</name>
          <script>tmp[&apos;receivedTTInjection&apos;] = validate(msg[&apos;tt_inject&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;receivedTTInjection&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;tt_inject&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>11</sequenceNumber>
          <name>firstPregnancy (out)</name>
          <script>tmp[&apos;firstPregnancy&apos;] = validate(msg[&apos;first_pg&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;firstPregnancy&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;first_pg&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>12</sequenceNumber>
          <name>healthFacilityOther (out)</name>
          <script>tmp[&apos;healthFacilityOther&apos;] = validate(msg[&apos;health_fac_other&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;healthFacilityOther&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;health_fac_other&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>13</sequenceNumber>
          <name>householdName (out)</name>
          <script>tmp[&apos;householdName&apos;] = validate(msg[&apos;household_name&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;householdName&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;household_name&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>14</sequenceNumber>
          <name>reportedBy (out)</name>
          <script>tmp[&apos;reportedBy&apos;] = validate(msg[&apos;reportby&apos;].toString(), &apos;&apos;, new Array());</script>
          <type>Message Builder</type>
          <data class="map">
            <entry>
              <string>Variable</string>
              <string>tmp[&apos;reportedBy&apos;]</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;reportby&apos;].toString()</string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>15</sequenceNumber>
          <name>Null out health facility</name>
          <script>// health facility is not required to complete the form
// if they is not entered, then the element are empty (e.g. &lt;healthFac /&gt;)
// when this is sent to the openhds web service, the empty elements are translated to empty strings
// the empty string results in a constraint failure. If it is not present, the element should not be inserted
// into the XML, so it will result in a null value on OpenHDS side, and allow the save
if (msg[&apos;health_fac&apos;].toString().length &gt; 0) {
  tmp[&apos;healthFacility&apos;] = msg[&apos;health_fac&apos;].toString();
}</script>
          <type>JavaScript</type>
          <data class="map">
            <entry>
              <string>Script</string>
              <string>// health facility is not required to complete the form
// if they is not entered, then the element are empty (e.g. &lt;healthFac /&gt;)
// when this is sent to the openhds web service, the empty elements are translated to empty strings
// the empty string results in a constraint failure. If it is not present, the element should not be inserted
// into the XML, so it will result in a null value on OpenHDS side, and allow the save
if (msg[&apos;health_fac&apos;].toString().length &gt; 0) {
  tmp[&apos;healthFacility&apos;] = msg[&apos;health_fac&apos;].toString();
}</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8
cmVzdWx0Pg0KICAgIDxfdXJpPnZhbHVlPC9fdXJpPg0KICAgIDxfY3JlYXRpb25fZGF0ZT52YWx1
ZTwvX2NyZWF0aW9uX2RhdGU+DQogICAgPHJlcG9ydGJ5PnZhbHVlPC9yZXBvcnRieT4NCiAgICA8
c3VwZXJ2aXNvcl9zdGF0dXM+dmFsdWU8L3N1cGVydmlzb3Jfc3RhdHVzPg0KICAgIDxob3VzZV9p
ZD52YWx1ZTwvaG91c2VfaWQ+DQogICAgPGhvdXNlaG9sZF9uYW1lPnZhbHVlPC9ob3VzZWhvbGRf
bmFtZT4NCiAgICA8dHRfaW5qZWN0PnZhbHVlPC90dF9pbmplY3Q+DQogICAgPGhlYWx0aF9mYWM+
dmFsdWU8L2hlYWx0aF9mYWM+DQogICAgPGhvdXNlX25hbWU+dmFsdWU8L2hvdXNlX25hbWU+DQog
ICAgPHZhbGlkYXRpb25fZmFpbGVkPnZhbHVlPC92YWxpZGF0aW9uX2ZhaWxlZD4NCiAgICA8aGVh
bHRoX2ZhY19vdGhlcj52YWx1ZTwvaGVhbHRoX2ZhY19vdGhlcj4NCiAgICA8bGFzdF9uYW1lPnZh
bHVlPC9sYXN0X25hbWU+DQogICAgPHZpc2l0X2lkPnZhbHVlPC92aXNpdF9pZD4NCiAgICA8dmlz
aXRfZGF0ZT52YWx1ZTwvdmlzaXRfZGF0ZT4NCiAgICA8YXR0ZW5kX2NsaT52YWx1ZTwvYXR0ZW5k
X2NsaT4NCiAgICA8ZGVyaXZlZF9mcm9tX3VyaT52YWx1ZTwvZGVyaXZlZF9mcm9tX3VyaT4NCiAg
ICA8Zmlyc3RfbmFtZT52YWx1ZTwvZmlyc3RfbmFtZT4NCiAgICA8ZmllbGRfd29ya2VyX2lkPnZh
bHVlPC9maWVsZF93b3JrZXJfaWQ+DQogICAgPGhvdXNlaG9sZF9pZD52YWx1ZTwvaG91c2Vob2xk
X2lkPg0KICAgIDxmaXJzdF9wZz52YWx1ZTwvZmlyc3RfcGc+DQogICAgPHByb2Nlc3NlZF9ieV9t
aXJ0aD52YWx1ZTwvcHJvY2Vzc2VkX2J5X21pcnRoPg0KICAgIDxpbmRpdmlkdWFsX2lkPnZhbHVl
PC9pbmRpdmlkdWFsX2lkPg0KICAgIDxsbXA+dmFsdWU8L2xtcD4NCiAgICA8bXByZWc+dmFsdWU8
L21wcmVnPg0KPC9yZXN1bHQ+DQo=</inboundTemplate>
      <outboundTemplate encoding="base64">PHByZWduYW5jeW9ic2VydmF0aW9uPgogIDxjb2xsZWN0ZWRCeT4KICAgIDxleHRJZCAvPgogIDwv
Y29sbGVjdGVkQnk+CiAgPG1vdGhlcj4KICAgIDxleHRpZCAvPgogIDwvbW90aGVyPgkKICA8aG91
c2U+CiAgICA8ZXh0SWQgLz4KICA8L2hvdXNlPgogIDxob3VzZWhvbGQ+CiAgICA8ZXh0SWQgLz4K
ICA8L2hvdXNlaG9sZD4KICA8ZXhwZWN0ZWREZWxpdmVyeURhdGUgLz4KICA8cmVjb3JkZWREYXRl
IC8+CiAgPGVzdGltYXRlZERhdGVPZkNvbmNlcHRpb24gLz4KICA8dmlzaXQ+CiAgICA8ZXh0SWQg
Lz4KICA8L3Zpc2l0PgogIDxwcmVnV29tYW5OYW1lIC8+CiAgPG51bU1vbnRoc09mUHJlZ25hbmN5
IC8+CiAgPGF0dGVuZGVkQW50ZU5hdGFsQ2xpbmljIC8+CiAgPHJlY2VpdmVkVFRJbmplY3Rpb24g
Lz4KICA8Zmlyc3RQcmVnbmFuY3kgLz4KICA8aGVhbHRoRmFjaWxpdHlPdGhlciAvPgogIDxob3Vz
ZWhvbGROYW1lIC8+CiAgPHJlcG9ydGVkQnkgLz4KPC9wcmVnbmFuY3lvYnNlcnZhdGlvbj4=</outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">true</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">true</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.2.1.5861</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>Destination 1</name>
      <properties>
        <property name="DataType">HTTP Sender</property>
        <property name="dispatcherAuthenticationType">Basic</property>
        <property name="dispatcherCharset">UTF-8</property>
        <property name="dispatcherContent">${message.transformedData}</property>
        <property name="dispatcherContentType">text/plain</property>
        <property name="dispatcherHeaders">&lt;properties&gt;
  &lt;property name=&quot;Content-type&quot;&gt;application/xml&lt;/property&gt;
&lt;/properties&gt;</property>
        <property name="dispatcherIncludeHeadersInResponse">0</property>
        <property name="dispatcherMethod">post</property>
        <property name="dispatcherMultipart">0</property>
        <property name="dispatcherParameters">&lt;properties/&gt;</property>
        <property name="dispatcherPassword">${openhdsPassword}</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherSocketTimeout">30000</property>
        <property name="dispatcherUseAuthentication">1</property>
        <property name="dispatcherUsername">${openhdsUser}</property>
        <property name="host">${openhdsUrl}/api/rest/corewebservice/pregnancyobservation</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64">PGRlYXRoPgogIDxpbnN0YW5jZUlkIC8+CiAgPGhvdXNlPgogICAgPGV4dElkIC8+CiAgPC9ob3Vz
ZT4KICA8aG91c2Vob2xkPgogICAgPGV4dElkIC8+CiAgPC9ob3VzZWhvbGQ+CiAgPGluZGl2aWR1
YWw+CiAgICA8ZXh0SWQgLz4KICA8L2luZGl2aWR1YWw+CiAgPGNvbGxlY3RlZEJ5PgogICAgPGV4
dElkIC8+CiAgPC9jb2xsZWN0ZWRCeT4KICA8ZGVhdGhEYXRlIC8+CiAgPHJlcG9ydGVkQnkgLz4K
ICA8ZGF0ZU9mSW50ZXJ2aWV3IC8+CiAgPGRlYXRoUGxhY2UgLz4KICA8c2V4IC8+CiAgPHZpc2l0
RGVhdGg+CiAgICA8ZXh0SWQgLz4KICA8L3Zpc2l0RGVhdGg+CiAgPHBsYWNlT2ZEZWF0aE90aGVy
IC8+CiAgPGRlY2Vhc2VkTmFtZSAvPgogIDxob3VzZWhvbGROYW1lIC8+CjwvZGVhdGg+</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">true</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>var obj = responseMap.get(&quot;Destination 1&quot;);
var status = obj.getStatus().toString();

if (status.indexOf(&quot;FAILURE&quot;) === 0) {
  logger.warn(&quot;There was an HTTP error sending a form&quot;);
  return;
}

var msgXml = new XML(obj.getMessage());
var origXml = new XML(messageObject.getRawData());
var invalidForm = msgXml[&quot;errors&quot;].length() &gt; 0 ? true : false;

executeUpdateQuery(&quot;UPDATE &quot; + globalMap.get(&quot;pregnancyRegistrationTableName&quot;) + &quot; SET processed_by_mirth = true, validation_failed = &quot; + invalidForm + &quot; WHERE _URI = &apos;&quot; + origXml[&apos;_uri&apos;].toString() + &quot;&apos;&quot;);

var instanceXml = reconstructInstanceXml(globalMap.get(&quot;pregnancyRegistrationTableName&quot;), origXml, globalMap.get(&quot;pregnancyRegistrationFormName&quot;));

if (invalidForm) {
  var auditXml = constructAuditXml(instanceXml, msgXml[&quot;errors&quot;], &quot;Pregnancy&quot;, origXml[&apos;field_worker_id&apos;].toString(), origXml[&apos;_uri&apos;].toString(), globalMap.get(&quot;pregnancyRegistrationFormName&quot;), origXml[&apos;derived_from_uri&apos;].toString(), true);
  router.routeMessage(&quot;Form Submission Channel&quot;, auditXml);
} else {
  var auditXml = constructAuditXml(instanceXml, msgXml[&quot;errors&quot;], &quot;Pregnancy&quot;, origXml[&apos;field_worker_id&apos;].toString(), origXml[&apos;_uri&apos;].toString(), globalMap.get(&quot;pregnancyRegistrationFormName&quot;), origXml[&apos;derived_from_uri&apos;].toString(), false);
  var completedForm = new XML(&quot;&lt;completedFormSubmission /&gt;&quot;);
  completedForm.appendChild(auditXml);
  completedForm[&quot;completedFormSubmissionId&quot;] = obj.getMessage();
  router.routeMessage(&quot;Form Complete Channel&quot;, completedForm);
}

return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>